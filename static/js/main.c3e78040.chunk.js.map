{"version":3,"sources":["components/Navigation/Navigation.tsx","components/Header/Header.tsx","App.tsx","pages/HomePage/HomePage.tsx","components/PeopleLink/PeopleLink.tsx","utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleTable/PeopleTable.tsx","api.ts","components/Loader/Loader.tsx","components/PeopleFilters.tsx","pages/PeoplePage/PeoplePage.tsx","utils/sortPeople.ts","utils/filterPeople.ts","index.tsx"],"names":["Navigation","getClassNames","isActive","classNames","className","to","Header","role","App","HomePage","PeopleLink","person","slug","name","sex","useSearchParams","searchParams","toString","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","search","sorts","PeopleTable","people","selectedSlug","useParams","currentSort","useMemo","sortBy","get","order","length","map","sort","sortLower","toLowerCase","born","died","motherName","fatherName","father","mother","API_URL","wait","delay","Promise","resolve","setTimeout","getPeople","then","fetch","response","json","Loader","centuries","PeopleFilters","setSearchParams","query","getAll","type","placeholder","onChange","event","target","century","includes","filter","paramsCentury","PeoplePage","useState","isLoading","setIsLoading","setPeople","error","setError","filters","useEffect","initialLoad","humans","human","find","filteredPeople","peopleCopy","direction","Person1","Person2","localeCompare","sortPeople","Math","ceil","trim","filterPeople","createRoot","document","getElementById","render","path","element","index","replace"],"mappings":"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","file":"static/js/main.c3e78040.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nexport const Navigation = () => {\n  const getClassNames = (isActive: boolean) => classNames(\n    'navbar-item',\n    { 'has-background-grey-lighter': isActive },\n  );\n\n  return (\n    <div className=\"container\">\n      <div className=\"navbar-brand\">\n        <NavLink\n          className={({ isActive }) => getClassNames(isActive)}\n          to=\"/\"\n        >\n          Home\n        </NavLink>\n\n        <NavLink\n          className={({ isActive }) => getClassNames(isActive)}\n          to=\"/people\"\n        >\n          People\n        </NavLink>\n      </div>\n    </div>\n  );\n};\n","import { Navigation } from '../Navigation/Navigation';\n\nexport const Header = () => (\n  <nav\n    data-cy=\"nav\"\n    className=\"navbar is-fixed-top has-shadow\"\n    role=\"navigation\"\n    aria-label=\"main navigation\"\n  >\n    <Navigation />\n  </nav>\n);\n","import { Outlet } from 'react-router-dom';\nimport './App.scss';\nimport { Header } from './components/Header/Header';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Header />\n      <main className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </main>\n    </div>\n  );\n};\n","export const HomePage = () => {\n  return (\n    <h1 className=\"title\">Home Page</h1>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport { Person } from '../../types';\n\ninterface Props {\n  person: Person\n}\n\nexport const PeopleLink: React.FC<Props> = ({ person }) => {\n  const {\n    slug,\n    name,\n    sex,\n  } = person;\n\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      className={classNames(\n        { 'has-text-danger': sex === 'f' },\n      )}\n      to={`/people/${slug}?${searchParams.toString()}`}\n    >\n      {name}\n    </Link>\n  );\n};\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import classNames from 'classnames';\nimport { useMemo } from 'react';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport { PeopleLink } from '../PeopleLink/PeopleLink';\nimport { SearchLink } from '../SearchLink';\nimport { Person } from '../../types';\nimport { Sort } from '../../types/Sort';\n\nconst sorts = ['Name', 'Sex', 'Born', 'Died'];\n\nexport const PeopleTable: React.FC<{ people: Person[] }> = ({ people }) => {\n  const { selectedSlug } = useParams();\n  const [searchParams] = useSearchParams();\n\n  const currentSort: Sort = useMemo(() => {\n    return {\n      sortBy: (searchParams.get('sort')),\n      order: (searchParams.get('order')),\n    };\n  }, [searchParams]);\n\n  return (\n    people.length === 0\n      ? (\n        <>\n          There are no people matching the current search criteria\n        </>\n      )\n      : (\n        <table\n          data-cy=\"peopleTable\"\n          className={classNames(\n            'table',\n            'is-striped',\n            'is-hoverable',\n            'is-narrow',\n            'is-fullwidth',\n          )}\n        >\n          <thead>\n            <tr>\n              {sorts.map(sort => {\n                const sortLower = sort.toLowerCase();\n\n                return (\n                  <th key={sortLower}>\n                    <span className=\"is-flex is-flex-wrap-nowrap\">\n                      {sort}\n                      <SearchLink\n                        params={{\n                          sort: sortLower === currentSort.sortBy\n                            && currentSort.order === 'desc'\n                            ? null\n                            : sortLower,\n                          order: sortLower === currentSort.sortBy\n                            && currentSort.order !== 'desc'\n                            ? 'desc'\n                            : null,\n                        }}\n                      >\n                        <span className=\"icon\">\n                          <i\n                            className={classNames(\n                              'fas',\n                              {\n                                'fa-sort': currentSort.sortBy !== sortLower,\n                                'fa-sort-up': currentSort.sortBy === sortLower\n                                  && !currentSort.order,\n                                'fa-sort-down': currentSort.sortBy === sortLower\n                                  && currentSort.order,\n                              },\n                            )}\n                          />\n                        </span>\n                      </SearchLink>\n                    </span>\n                  </th>\n                );\n              })}\n\n              <th>Mother</th>\n              <th>Father</th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {people.map(person => {\n              const {\n                sex,\n                born,\n                died,\n                motherName,\n                fatherName,\n                slug,\n                father,\n                mother,\n              } = person;\n\n              return (\n                <tr\n                  key={slug}\n                  data-cy=\"person\"\n                  className={classNames(\n                    {\n                      'has-background-warning': slug === selectedSlug,\n                    },\n                  )}\n                >\n                  <td>\n                    <PeopleLink person={person} />\n                  </td>\n\n                  <td>{sex}</td>\n                  <td>{born}</td>\n                  <td>{died}</td>\n                  <td>\n                    {mother\n                      ? <PeopleLink person={mother as Person} />\n                      : motherName || '-'}\n                  </td>\n                  <td>\n                    {father\n                      ? <PeopleLink person={father as Person} />\n                      : fatherName || '-'}\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      )\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\n\nimport { useSearchParams } from 'react-router-dom';\nimport { SearchLink } from './SearchLink';\nimport { getSearchWith } from '../utils/searchHelper';\n\nconst centuries = [16, 17, 18, 19, 20];\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const params = {\n    query: searchParams.get('query'),\n    centuries: searchParams.getAll('century'),\n    sex: searchParams.get('sex'),\n  };\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (!event.target.value) {\n      setSearchParams(\n        getSearchWith(searchParams, { query: null }),\n      );\n    } else {\n      setSearchParams(\n        getSearchWith(searchParams, { query: event.target.value }),\n      );\n    }\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          className={classNames(\n            {\n              'is-active': params.sex === null,\n            },\n          )}\n          params={{ sex: null }}\n        >\n          All\n        </SearchLink>\n        <SearchLink\n          className={classNames(\n            {\n              'is-active': params.sex === 'm',\n            },\n          )}\n          params={{ sex: 'm' }}\n        >\n          Male\n        </SearchLink>\n        <SearchLink\n          className={classNames(\n            {\n              'is-active': params.sex === 'f',\n            },\n          )}\n          params={{ sex: 'f' }}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={params.query || ''}\n            onChange={handleQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {centuries.map(century => (\n              <SearchLink\n                key={century}\n                data-cy=\"century\"\n                className={classNames(\n                  'button',\n                  'mr-1',\n                  {\n                    'is-info': params.centuries.includes(century.toString()),\n                  },\n                )}\n                params={{\n                  century: (params.centuries.includes(century.toString())\n                    ? params.centuries.filter(\n                      paramsCentury => century.toString() !== paramsCentury,\n                    )\n                    : [...params.centuries, century.toString()]),\n                }}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className={classNames(\n                'button',\n                'is-success',\n                {\n                  'is-outlined': params.centuries.length !== 0,\n                },\n              )}\n              params={{\n                century: null,\n              }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{\n            century: null,\n            sex: null,\n            query: null,\n          }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import { useEffect, useMemo, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { PeopleTable } from '../../components/PeopleTable/PeopleTable';\nimport { Person } from '../../types';\nimport { getPeople } from '../../api';\nimport { Loader } from '../../components/Loader';\nimport { PeopleFilters } from '../../components/PeopleFilters';\nimport { Filters } from '../../types/Filters';\nimport { filterPeople } from '../../utils/filterPeople';\nimport { Sort } from '../../types/Sort';\nimport { sortPeople } from '../../utils/sortPeople';\n\nexport const PeoplePage = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [people, setPeople] = useState<Person[] | []>([]);\n  const [error, setError] = useState(false);\n\n  const [searchParams] = useSearchParams();\n\n  const filters: Filters = useMemo(() => {\n    return {\n      centuries: (searchParams.getAll('century')),\n      sex: (searchParams.get('sex')),\n      query: (searchParams.get('query')),\n    };\n  }, [searchParams]);\n\n  const sorts: Sort = useMemo(() => {\n    return {\n      sortBy: (searchParams.get('sort')),\n      order: (searchParams.get('order')),\n    };\n  }, [searchParams]);\n\n  useEffect(() => {\n    const initialLoad = async () => {\n      try {\n        const humans = await getPeople();\n\n        setPeople(humans.map(human => {\n          return {\n            ...human,\n            mother: humans.find(person => person.name === human.motherName),\n            father: humans.find(person => person.name === human.fatherName),\n          };\n        }));\n      } catch (e) {\n        setError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    initialLoad();\n  }, []);\n\n  const filteredPeople = sortPeople(filterPeople(people, filters), sorts);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            <PeopleFilters />\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n\n              {isLoading\n                ? <Loader />\n                : (\n                  <>\n                    {error && (\n                      <p\n                        data-cy=\"peopleLoadingError\"\n                        className=\"has-text-danger\"\n                      >\n                        Something went wrong\n                      </p>\n                    )}\n\n                    {!people.length && !isLoading\n                      ? (\n                        <p data-cy=\"noPeopleMessage\">\n                          There are no people on the server\n                        </p>\n                      )\n                      : <PeopleTable people={filteredPeople} />}\n                  </>\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { Person } from '../types';\nimport { Sort } from '../types/Sort';\n\nexport function sortPeople(people: Person[], sort: Sort) {\n  const peopleCopy = [...people];\n\n  const direction = sort.order ? -1 : 1;\n\n  if (sort.sortBy) {\n    switch (sort.sortBy) {\n      case 'died':\n        return peopleCopy.sort((Person1, Person2) => (\n          (Person1.died - Person2.died) * direction\n        ));\n      case 'born':\n        return peopleCopy.sort((Person1, Person2) => (\n          (Person1.born - Person2.born) * direction\n        ));\n      case 'sex':\n        return peopleCopy.sort((Person1, Person2) => (\n          (Person1.sex.localeCompare(Person2.sex)) * direction\n        ));\n      case 'name':\n        return peopleCopy.sort((Person1, Person2) => (\n          (Person1.name.localeCompare(Person2.name)) * direction\n        ));\n      default:\n        return peopleCopy;\n    }\n  }\n\n  return peopleCopy;\n}\n","import { Person } from '../types';\nimport { Filters } from '../types/Filters';\n\nexport function filterPeople(people: Person[], filters: Filters) {\n  let peopleCopy = [...people];\n\n  if (filters.centuries?.length !== 0) {\n    peopleCopy = peopleCopy.filter((person: Person) => (\n      filters.centuries?.includes(Math.ceil(person.born / 100).toString())\n    ));\n  }\n\n  if (filters.sex) {\n    peopleCopy = peopleCopy.filter((person: Person) => (\n      person.sex === filters.sex\n    ));\n  }\n\n  if (filters.query) {\n    peopleCopy = peopleCopy.filter((person: Person) => (\n      person.name.toLowerCase().includes(\n        filters.query?.toLowerCase().trim() as string,\n      )\n      || person.fatherName?.toLowerCase().includes(\n        filters.query?.toLowerCase().trim() as string,\n      )\n      || person.motherName?.toLowerCase().includes(\n        filters.query?.toLowerCase().trim() as string,\n      )\n    ));\n  }\n\n  return peopleCopy;\n}\n","import { createRoot } from 'react-dom/client';\nimport {\n  HashRouter,\n  Navigate,\n  Route,\n  Routes,\n} from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\nimport { HomePage } from './pages/HomePage/HomePage';\nimport { PeoplePage } from './pages/PeoplePage/PeoplePage';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <HashRouter>\n      <Routes>\n        <Route path=\"/\" element={<App />}>\n          <Route index element={<HomePage />} />\n          <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n          <Route path=\"people\" element={<PeoplePage />}>\n            <Route path=\":selectedSlug?\" />\n          </Route>\n          <Route\n            path=\"*\"\n            element={\n              <h1 className=\"title\">Page not found</h1>\n            }\n          />\n        </Route>\n      </Routes>\n    </HashRouter>,\n  );\n"],"sourceRoot":""}